// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: protobuf/telematics_data.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelematicsDataServiceClient is the client API for TelematicsDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelematicsDataServiceClient interface {
	GetLatestData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TelematicsDataProto, error)
	GetRangeData(ctx context.Context, in *RangeDataRequest, opts ...grpc.CallOption) (TelematicsDataService_GetRangeDataClient, error)
}

type telematicsDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelematicsDataServiceClient(cc grpc.ClientConnInterface) TelematicsDataServiceClient {
	return &telematicsDataServiceClient{cc}
}

func (c *telematicsDataServiceClient) GetLatestData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TelematicsDataProto, error) {
	out := new(TelematicsDataProto)
	err := c.cc.Invoke(ctx, "/proto.TelematicsDataService/GetLatestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telematicsDataServiceClient) GetRangeData(ctx context.Context, in *RangeDataRequest, opts ...grpc.CallOption) (TelematicsDataService_GetRangeDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelematicsDataService_ServiceDesc.Streams[0], "/proto.TelematicsDataService/GetRangeData", opts...)
	if err != nil {
		return nil, err
	}
	x := &telematicsDataServiceGetRangeDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelematicsDataService_GetRangeDataClient interface {
	Recv() (*TelematicsDataProto, error)
	grpc.ClientStream
}

type telematicsDataServiceGetRangeDataClient struct {
	grpc.ClientStream
}

func (x *telematicsDataServiceGetRangeDataClient) Recv() (*TelematicsDataProto, error) {
	m := new(TelematicsDataProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelematicsDataServiceServer is the server API for TelematicsDataService service.
// All implementations must embed UnimplementedTelematicsDataServiceServer
// for forward compatibility
type TelematicsDataServiceServer interface {
	GetLatestData(context.Context, *emptypb.Empty) (*TelematicsDataProto, error)
	GetRangeData(*RangeDataRequest, TelematicsDataService_GetRangeDataServer) error
	mustEmbedUnimplementedTelematicsDataServiceServer()
}

// UnimplementedTelematicsDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelematicsDataServiceServer struct {
}

func (UnimplementedTelematicsDataServiceServer) GetLatestData(context.Context, *emptypb.Empty) (*TelematicsDataProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestData not implemented")
}
func (UnimplementedTelematicsDataServiceServer) GetRangeData(*RangeDataRequest, TelematicsDataService_GetRangeDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRangeData not implemented")
}
func (UnimplementedTelematicsDataServiceServer) mustEmbedUnimplementedTelematicsDataServiceServer() {}

// UnsafeTelematicsDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelematicsDataServiceServer will
// result in compilation errors.
type UnsafeTelematicsDataServiceServer interface {
	mustEmbedUnimplementedTelematicsDataServiceServer()
}

func RegisterTelematicsDataServiceServer(s grpc.ServiceRegistrar, srv TelematicsDataServiceServer) {
	s.RegisterService(&TelematicsDataService_ServiceDesc, srv)
}

func _TelematicsDataService_GetLatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelematicsDataServiceServer).GetLatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TelematicsDataService/GetLatestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelematicsDataServiceServer).GetLatestData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelematicsDataService_GetRangeData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelematicsDataServiceServer).GetRangeData(m, &telematicsDataServiceGetRangeDataServer{stream})
}

type TelematicsDataService_GetRangeDataServer interface {
	Send(*TelematicsDataProto) error
	grpc.ServerStream
}

type telematicsDataServiceGetRangeDataServer struct {
	grpc.ServerStream
}

func (x *telematicsDataServiceGetRangeDataServer) Send(m *TelematicsDataProto) error {
	return x.ServerStream.SendMsg(m)
}

// TelematicsDataService_ServiceDesc is the grpc.ServiceDesc for TelematicsDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelematicsDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TelematicsDataService",
	HandlerType: (*TelematicsDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestData",
			Handler:    _TelematicsDataService_GetLatestData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRangeData",
			Handler:       _TelematicsDataService_GetRangeData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/telematics_data.proto",
}
